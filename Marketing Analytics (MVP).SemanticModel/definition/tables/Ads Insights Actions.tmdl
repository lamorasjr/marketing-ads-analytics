table 'Ads Insights Actions'
	lineageTag: be5ef102-db7a-4fe8-8814-f6dfa283bcfa

	column 'Customer Ad Account'
		dataType: string
		lineageTag: b85bc7de-6d1b-473f-b987-d1441b4f1811
		summarizeBy: none
		sourceColumn: Customer Ad Account

		annotation SummarizationSetBy = Automatic

	column account_id
		dataType: string
		lineageTag: 1eba8d7a-0d52-4c7d-b330-151ad7d39e37
		summarizeBy: none
		sourceColumn: account_id

		annotation SummarizationSetBy = Automatic

	column date_start
		dataType: string
		lineageTag: d40f034b-07b8-4d40-bd89-9f2538663b64
		summarizeBy: none
		sourceColumn: date_start

		annotation SummarizationSetBy = Automatic

	column date_stop
		dataType: string
		lineageTag: 716d0419-ce53-4899-bd42-9b0e881e0130
		summarizeBy: none
		sourceColumn: date_stop

		annotation SummarizationSetBy = Automatic

	column action_type
		dataType: string
		lineageTag: 8f12e3ca-fa31-439a-a403-5747b5d85bde
		summarizeBy: none
		sourceColumn: action_type

		annotation SummarizationSetBy = Automatic

	column value
		dataType: string
		lineageTag: 527ee2e8-5430-4d90-a47e-e5012519e8c5
		summarizeBy: none
		sourceColumn: value

		annotation SummarizationSetBy = Automatic

	partition 'Ads Insights Actions' = m
		mode: import
		source = ```
				let
				// API parameters
				    Base_url = "https://graph.facebook.com/v18.0/",
				    Endpoint_url = "/insights",
				    Fields = "account_id,campaign_id,adset_id,ad_id,date_start,date_stop,actions",
				    Limit = "5000",
				    Date_preset = "last_30d",
				            
				// Get API data functions
				    fn_get_api_data = ( Adaccount_id as text, Page_cursor as text) =>
				        Json.Document(
				            Web.Contents( 
				                Base_url,
				                [
				                    RelativePath = Adaccount_id & Endpoint_url,
				                    Headers = [ Authorization = "Bearer " & access_token ], 
				                    Query = [ date_preset=Date_preset, fields=Fields, limit=Limit, after=Page_cursor ] 
				                ] 
				            )
				        ),
				
				// Get API paginated results
				    fn_get_api_data_loop = ( Adaccount_id as text ) =>
				        List.Generate(
				            () => [
				                api_data = fn_get_api_data( Adaccount_id , "" ),   // Adjust the addacoun parameter here
				                api_cursor = ""
				            ],
				            each List.Count( [api_data][data] ) > 0,
				            each [ 
				                api_data = fn_get_api_data( Adaccount_id , [api_data][paging][cursors][after] ),   // Adjust the addacoun parameter here
				                api_cursor = [api_data][paging][cursors][after]
				            ],
				            each Table.FromRecords({[ api_data = [api_data][data], api_cursor = [api_data][paging][cursors][after] ]})
				        ),
				        
				// Get data from all user ad account
				    Source = Table.AddColumn(customer_adaccounts, "API data", each fn_get_api_data_loop([Customer Ad Account])),
				    #"Expanded API data" = Table.ExpandListColumn(Source, "API data"),
				    #"Expanded API data1" = Table.ExpandTableColumn(#"Expanded API data", "API data", {"api_data", "api_cursor"}, {"api_data", "api_cursor"}),
				    #"Expanded api_data" = Table.ExpandListColumn(#"Expanded API data1", "api_data"),
				    #"Expanded api_data1" = Table.ExpandRecordColumn(#"Expanded api_data", "api_data", {"account_id", "date_start", "date_stop", "actions"}, {"account_id", "date_start", "date_stop", "actions"}),
				    #"Expanded actions" = Table.ExpandListColumn(#"Expanded api_data1", "actions"),
				    #"Expanded actions1" = Table.ExpandRecordColumn(#"Expanded actions", "actions", {"action_type", "value"}, {"action_type", "value"}),
				    #"Removed Columns" = Table.RemoveColumns(#"Expanded actions1",{"api_cursor"})
				in
				    #"Removed Columns"
				```

	annotation PBI_NavigationStepName = Navigation

	annotation PBI_ResultType = Table

